package com.extant.utilities;
import java.util.Vector;
import java.util.StringTokenizer;
import java.io.*;

public class CompileSwitch
  {
  public static final String commentTag = "//\\/"; // no confusion with JavaDoc
  Vector defines;
  static boolean makeBackupFiles = false;
  static boolean quiet = false;
  static boolean verbose = false;

  public CompileSwitch( Vector defines )
    {
    this.defines = defines;
    }

  public void processFile( String fileName )
    {
    UsefulFile inFile=null, outFile=null;
    String image, command, name;
    boolean doing = true;
    try
      {
      if ( !quiet ) Console.println( "Processing File " + fileName );
      UsefulFile file = new UsefulFile( fileName, "r" );
      file.copyToFile( fileName + ".bak" );
      file.close();
      inFile = new UsefulFile( fileName + ".bak", "r" );
      outFile = new UsefulFile( fileName, "w" );
      doing = true;
      while ( !inFile.EOF() )
        {
        image = inFile.readLine( UsefulFile.RIGHT_WHITE );
        StringTokenizer st = new StringTokenizer( image );
        if ( st.hasMoreElements() ) command = (String)st.nextElement();
        else command = "";

        if ( command.startsWith( "//" ) )
          {
          if ( command.equals( "//DEFINE" ) )
            defines.addElement( (String)st.nextElement() );
          else if ( command.equals( "//UNDEF" ) )
            defines.removeElement( (String)st.nextElement() );
          else if ( command.equals( "//IFDEF" ) )
            {
            name = (String)st.nextElement();
            doing = defines.contains( name );
            }
          else if ( command.startsWith( "//ELSE" ) ) doing = !doing;
          else if ( command.startsWith( "//ENDIF" ) ) doing = true;
          if ( doing )
            {
            if ( command.startsWith( "///" ) ) image = image.substring( 3 );
            else if ( command.startsWith( commentTag ) )
              image = image.substring( commentTag.length() );
            }
          else
            { // just for initial conversion when changing commentTag
            if ( command.startsWith( "///" ) ) image = commentTag + image.substring( 3 );
            }
          outFile.writeLine( image );
          }
        else
          {
          if ( doing ) outFile.writeLine( image );
          //else outFile.writeLine( "///" + image );
          else outFile.writeLine( commentTag + image );
          }
        }
      }
    catch (IOException iox)
      {
      Console.println( "File: " + fileName + " Error: " + iox.getMessage() );
      return;
      }
    catch (Exception x)
      {
      Console.println( "File: " + fileName + " Unexpected Error: " + x.getMessage() );
      x.printStackTrace();
      }
    if ( !makeBackupFiles ) inFile.delete();
    else inFile.close();
    outFile.close();
    }

  public void setQuiet( boolean quiet )
    {
    this.quiet = quiet;
    }

  public static void main( String[] args )
    {
    boolean error = false;
    int i;
    String listFile = null;
    Vector defines = new Vector();
    Vector files = new Vector();
    String image;
    int nFiles = 0;
    Strings strings = new Strings();
    String fileSpec, dirName, fileName;
    String[] fileNames;

    try
      {
      if ( args.length == 0 ) printUsage();
      i = 0;
      while ( i < args.length )
        {
        if ( args[i].startsWith( "-" ) )
          {
          if ( args[i].charAt( 1 ) == 'D' )
            defines.addElement( args[i].substring( 2 ) );
          else if ( args[i].substring(1).equals( "v" ) )
            verbose = true;
          else if ( args[i].substring(1).equals( "b" ) )
            makeBackupFiles = true;
          else if ( args[i].substring(1).equals( "q" ) )
            quiet = true; // No prompt when done
          else if ( args[i].substring(1).startsWith( "?" ) )
            {
            printUsage();
            error = true;
            break;
            }
          else
            {
            Console.println( "Invalid Switch: " + args[i] );
            error = true;
            break;
            }
          }
        else if ( args[i].startsWith( "@" ) )
          listFile = args[i].substring( 1 );
        else if ( args[i].startsWith( "?" ) )
          {
          printUsage();
          error = true;
          break;
          }
        else
          {
// Console.println ( "[i=" + i + "] adding " + args[i] + " to files" );
// There is some kind of magic going on here -- the parameter list has been expanded
// to include all the files which satisfy wildcard entries in a parameter !!!
// Whatha hell is this?  and whotha hell is doing it?
          files.addElement( args[i] );
          }
        ++i;
        }
      if ( error ) System.exit( 1 );

      if ( verbose )
        {
        Console.print( "Defines: " );
        for (int j=0; j<defines.size(); ++j) Console.print( (String)defines.elementAt(j) + " " );
        Console.print( "\nFiles: " );
        for (int j=0; j<files.size(); ++j) Console.print( (String)files.elementAt(j) + " " );
        Console.println ( "\n@file = " + listFile );
        }

      CompileSwitch compileSwitch = new CompileSwitch( defines );
      for ( i=0; i<files.size(); ++i )
        {
        compileSwitch.processFile( (String)files.elementAt( i ) );
        ++nFiles;
        }
      if ( listFile != null )
        {
        UsefulFile fileFile = new UsefulFile( listFile );
        while ( !fileFile.EOF() )
          {
          image = fileFile.readLine();
          if ( image.length() < 3 ) continue;
          if ( image.startsWith( "*" ) ) continue;
          if ( image.startsWith( "#" ) ) continue;
          fileSpec = Strings.trim( image, " " );
          dirName = Strings.fileSpec( "PATH", fileSpec );
          fileName = Strings.fileSpec( "FILE", fileSpec );
          fileNames = strings.getMatchingFiles( dirName, fileName );
          for (int j=0; i<fileNames.length; ++j)
            {
            compileSwitch.processFile( fileNames[j] );
            ++nFiles;
            }
          }
        }
      }
    catch (IOException iox)
      {
      Console.println( "Error on @file '" + listFile + "': " +
        iox.getMessage() );
      }
    catch (Exception x)
      {
      Console.println( x.getMessage() );
      //x.printStackTrace();
      }
    if ( !quiet )
      {
      Console.println( nFiles + " file" + Strings.plural( nFiles ) + " processed." );
      Console.prompt( "Done ..." );
      }
    }

  private static void printUsage()
    {
    Console.println( "Use: CompileSwitch [-b] [-n] [-v] [-Dvar ...] @<list> | fileNames" );
    Console.println( "   -b: Make backup files before converting" );
    Console.println( "   -q: Quiet mode (No Console output except errors)" );
    Console.println( "   -v: Verbose output" );
    Console.println( "   var: Name of variable to define" );
    Console.println( "   list: name of file containing list of files to convert" );
    Console.println( "   fileNames: space-separated list of files to convert" );
    Console.println( "fileNames can contain '*' wildcard" );
    Console.println( "both @<list> and fileNames can be specified in the same run" );
    }

  }

/*** This is how hSQL did it
     This has the disadvantage that it screws up if there are "slash/star"
     remarks within the conditionally-compiled ranges.

//#ifdef JAVA2
      pProperties.store(out,"Hypersonic SQL database");
//#else
/*
      pProperties.save(out,"Hypersonic SQL database");
